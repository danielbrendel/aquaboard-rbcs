# AquaShell Counter-Strike Retroboard config sources manager script file

const CONFIGS_WINDOW_POSX int <= 550;
const CONFIGS_WINDOW_POSY int <= 125;
const CONFIGS_WINDOW_WIDTH int <= 415;
const CONFIGS_WINDOW_HEIGHT int <= 576;
const CONFIGS_WINDOW_BORDER_SIZE int <= 6;
const CONFIGS_TIMER_DELAY int <= 20000;

global iConfigIndex int;
global hConfigFont int;
global bConfigOnce bool;

array arrConfigItems string 10 (
    "autobuy",
    "bhop",
    "bindings",
    "commandmenu",
    "namechanger",
    "netsettings",
    "optimizing",
    "polyoffset",
    "quickscope",
    "waits"
);

array arrConfigContents string 0 ();

function SwitchConfigShowcase_OnElapsed bool()
{
	call updateConfigItem() => void;

	result true;
};

function loadCfgFileContent string(cfgbasefile string)
{
    local hFileHandle int;
    local bAtEndOfFile bool;
    local szCurReadLine string;
    local szWholeContent string;

    result "";

    set szWholeContent <= "";

    fopen "%cfgbasefile" false hFileHandle;
    if (%hFileHandle, -nt, %FIO_INVALID_HANDLE) {
        set bAtEndOfFile <= false;
        
        while (%bAtEndOfFile, -eq, false) {
            fateof %hFileHandle bAtEndOfFile;
            freadline %hFileHandle szCurReadLine;
            
            set szWholeContent <= "%szWholeContent%CR%LF%szCurReadLine";
        };
        
        fclose %hFileHandle;
    };

    result "%szWholeContent";
};

function loadConfigItem void(configBasePath string)
{
    local configContent string;

    set bConfigOnce <= false;

    for (cfgcnt, 0, %arrConfigItems.length, -inc) {
        call loadCfgFileContent("%configBasePath\%arrConfigItems[%cfgcnt].txt") => configContent;
        array_item_append arrConfigContents "%configContent";
    };
    
    dx.gfx.loadfont "Verdana" 8 20 hConfigFont;

    random 0 %arrConfigItems.length iConfigIndex;
    call updateConfigItem() => void;

    aut_addtimer SwitchConfigShowcase %CONFIGS_TIMER_DELAY;
};

function updateConfigItem void()
{
    local fixedquantity int;
    local currentConfig string;

    set fixedquantity <= %arrConfigItems.length;
    -- fixedquantity;

    ++ iConfigIndex;
    if (%iConfigIndex, -gre, %fixedquantity) {
        set iConfigIndex <= 0;
    };

    array_item_get arrConfigContents %iConfigIndex currentConfig;

    if (%bConfigOnce, -eq, true) {
        s_cleartokens arrSplittedConfigLines;
    } else {
        set bConfigOnce <= true;
    };

    s_tokenize "%currentConfig" "%CR%LF" arrSplittedConfigLines;

    for (j, 0, %arrSplittedConfigLines.count, -inc) {
        s_replace arrSplittedConfigLines[%j] {\n} " ";
    };
};

function drawConfigLines void()
{
    local curposx int;
    local curposy int;
    local strcurline string;
    local curlinelen int;
    local cmtpos int;
    local curcolorr int;
    local curcolorg int;
    local curcolorb int;
    local curcolora int;

    set curposx <= %CONFIGS_WINDOW_POSX;
    set curposy <= %CONFIGS_WINDOW_POSY;

    += curposx 20;
    += curposy 20;

    dx.gfx.drawfilledbox %CONFIGS_WINDOW_POSX %CONFIGS_WINDOW_POSY %CONFIGS_WINDOW_WIDTH %CONFIGS_WINDOW_HEIGHT 62 70 55 150;
    dx.gfx.drawbox %CONFIGS_WINDOW_POSX %CONFIGS_WINDOW_POSY %CONFIGS_WINDOW_WIDTH %CONFIGS_WINDOW_HEIGHT %CONFIGS_WINDOW_BORDER_SIZE 79 89 69 150;

    for (i, 0, %arrSplittedConfigLines.count, -inc) {
        set strcurline <= "%arrSplittedConfigLines[%i]";

        set curcolorr <= 255;
        set curcolorg <= 255;
        set curcolorb <= 255;
        set curcolora <= 255;

        s_getlen "%strcurline" curlinelen;
        if (%curlinelen, -gr, 1) {
            s_ltrim strcurline;

            s_find "%strcurline" "//" cmtpos;
            if (%cmtpos, -gre, 0) {
                set curcolorr <= 150;
                set curcolorg <= 190;
                set curcolorb <= 150;
                set curcolora <= 255;
            } else {
                set curcolorr <= 255;
                set curcolorg <= 255;
                set curcolorb <= 255;
                set curcolora <= 255;
            };
        };

        dx.gfx.drawstring %hConfigFont "%strcurline" %curposx %curposy %curcolorr %curcolorg %curcolorb %curcolora;

        += curposx 0;
        += curposy 30;
    };
};

function checkConfigClicked void()
{
    local chkcfgframewidth int;
	local chkcfgframeheight int;
	
	set chkcfgframewidth <= %CONFIGS_WINDOW_POSX;
	set chkcfgframeheight <= %CONFIGS_WINDOW_POSY;

	+= chkcfgframewidth %CONFIGS_WINDOW_WIDTH;
	+= chkcfgframeheight %CONFIGS_WINDOW_HEIGHT;

    -= chkcfgframewidth 10;
    -= chkcfgframeheight 30;

	if (%iMouseXPos, -gr, %CONFIGS_WINDOW_POSX) {
		if (%iMouseXPos, -ls, %chkcfgframewidth) {
			if (%iMouseYPos, -gr, %CONFIGS_WINDOW_POSY) {
				if (%iMouseYPos, -ls, %chkcfgframeheight) {
                    call updateConfigItem() => void;
					dx.snd.play %hSndLinkClick %GLOBAL_VOLUME;
				};
			};
		};
	};
};